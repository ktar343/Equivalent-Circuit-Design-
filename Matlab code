%==========================================================================
%   NMC 배터리 열화 및 동적 파라미터 시뮬레이션
%==========================================================================
%--------------------------------------------------------------------------
%   1. 데이터 통합 및 보간 함수 생성
%--------------------------------------------------------------------------
%--- SOC-VTR0 데이터 (SOC, OCV, R0, R1, R2, C1, C2, Tau1, Tau2 관계) ---
soc_data = [100, 88.8868657, 77.7798009, 66.6666667, 55.55353240000001, 44.4464676, 33.3333333, 22.2201991, 11.1070648, 0.0];
% 0°C 데이터 (⭐ 제공된 CSV 파일 데이터)
ocv_data_0C = [4.2, 4.0405, 3.9374, 3.844, 3.759, 3.671, 3.6282, 3.6009, 3.5742, 3.4716];
r0_data_0C = [0.1107, 0.1107, 0.1089, 0.1155, 0.117, 0.1154, 0.1087, 0.1069, 0.1227, 0.1321];
r1_data_0C = [0.0305, 0.0305, 0.0346, 0.0456, 0.0499, 0.049, 0.0309, 0.0288, 0.0368, 0.0268];
c1_data_0C = [1171.1206, 1171.1206, 976.4491, 750.6419, 627.9542, 588.1075, 988.0874, 1108.4109, 1131.425, 413.9369];
r2_data_0C = [0.4279, 0.4279, 0.2785, 0.2062, 0.1473, 0.107, 0.0706, 0.1282, 0.2169, 4.3413];
c2_data_0C = [4425.7639, 4425.7639, 3791.196, 4349.688, 4346.0329, 5119.5825, 6877.6715, 6310.6527, 5968.8269, 2819.0363];
tau1_data_0C = [35.7035, 35.7035, 33.7415, 34.2325, 31.3147, 28.8031, 30.5023, 31.8702, 41.6392, 11.1032];
tau2_data_0C = [1893.9409, 1893.9409, 1055.7455, 897.0311, 639.6711, 547.9316, 485.3542, 808.9907, 1294.7222, 12238.3043];
% 25°C 데이터 (⭐ 제공된 CSV 파일 데이터)
ocv_data_25C = [4.2, 4.0578, 3.9475, 3.8471, 3.7591, 3.671, 3.6287, 3.6013, 3.5621, 3.3585];
r0_data_25C = [0.1042, 0.1042, 0.1046, 0.104, 0.1043, 0.1041, 0.1033, 0.1032, 0.1035, 0.1056];
r1_data_25C = [0.013, 0.013, 0.0177, 0.0234, 0.0309, 0.0354, 0.016, 0.0172, 0.0209, 0.0173];
c1_data_25C = [1746.9339, 1746.9339, 1392.9526, 1162.5295, 1135.5151, 1028.1558, 1267.8668, 2130.177, 2412.4328, 1700.2823];
r2_data_25C = [0.4685, 0.4685, 0.4363, 0.4119, 0.2049, 0.1151, 0.0768, 0.0892, 0.1906, 0.7404];
c2_data_25C = [4569.0957, 4569.0957, 5098.0301, 5261.2847, 4884.6356, 5659.8958, 8584.1354, 12255.4879, 10845.9305, 6183.6625];
tau1_data_25C = [22.7467, 22.7467, 24.6218, 27.2197, 35.1393, 36.3713, 20.2959, 36.7367, 50.3057, 29.4916];
tau2_data_25C = [2140.6729, 2140.6729, 2224.0964, 2167.3307, 1000.9794, 651.394, 659.0507, 1093.6485, 2067.605, 4578.1359];
% 45°C 데이터 (⭐ 제공된 CSV 파일 데이터)
ocv_data_45C = [4.2, 4.0648, 3.9556, 3.8552, 3.7659, 3.6778, 3.6355, 3.608, 3.5612, 3.3997];
r0_data_45C = [0.075, 0.075, 0.0755, 0.0774, 0.0771, 0.0771, 0.0776, 0.0763, 0.0765, 0.0769];
r1_data_45C = [0.0081, 0.0081, 0.0099, 0.0132, 0.0179, 0.0265, 0.0118, 0.0126, 0.0154, 0.0106];
c1_data_45C = [2257.543, 2257.543, 1769.3413, 1466.5542, 1419.416, 1822.2852, 1895.0324, 2485.3047, 2890.6988, 1229.311];
r2_data_45C = [0.5223, 0.5223, 0.475, 0.473, 0.3968, 0.1204, 0.085, 0.0898, 0.2428, 1.1858];
c2_data_45C = [4876.6716, 4876.6716, 5434.6332, 5846.936, 5943.4192, 5924.6537, 10783.0127, 14452.1048, 12870.3747, 7694.1072];
tau1_data_45C = [18.3252, 18.3252, 17.5816, 19.334, 25.4136, 48.2173, 22.4176, 31.2302, 44.4809, 13.0203];
tau2_data_45C = [2547.0877, 2547.0877, 2581.3176, 2765.4374, 2358.1095, 713.2342, 916.6587, 1297.9382, 3124.9822, 9123.6137];
% SOC에 따른 파라미터 보간 함수
ocv_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
r0_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
r1_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
c1_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
r2_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
c2_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
tau1_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
tau2_func = @(soc, temp_data) interp1(soc_data, temp_data, soc, 'pchip', 'extrap');
%--- EIL-MJ1-015 데이터 (사이클, 용량 관계) ---
% CSV 파일에서 추출한 사이클-방전용량 데이터를 정의
cycle_num_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400];
dis_cap_data = [3.37, 3.37, 3.36, 3.35, 3.34, 3.34, 3.33, 3.33, 3.32, 3.31, 3.31, 3.3, 3.3, 3.29, 3.29, 3.28, 3.28, 3.28, 3.27, 3.27, 3.26, 3.26, 3.26, 3.25, 3.25, 3.25, 3.24, 3.24, 3.24, 3.24, 3.23, 3.23, 3.23, 3.23, 3.22, 3.22, 3.22, 3.22, 3.22, 3.21, 3.21, 3.21, 3.21, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.19, 3.19, 3.19, 3.19, 3.19, 3.19, 3.18, 3.18, 3.18, 3.18, 3.18, 3.18, 3.17, 3.17, 3.17, 3.17, 3.17, 3.17, 3.17, 3.17, 3.17, 3.16, 3.16, 3.16, 3.16, 3.16, 3.16, 3.16, 3.16, 3.16, 3.15, 3.15, 3.15, 3.15, 3.15, 3.15, 3.13, 3.12, 3.12, 3.12, 3.11, 3.11, 3.11, 3.11, 3.1, 3.1, 3.1, 3.1, 3.09, 3.1, 3.09, 3.09, 3.09, 3.09, 3.08, 3.08, 3.08, 3.08, 3.08, 3.08, 3.11, 3.1, 3.1, 3.1, 3.09, 3.09, 3.09, 3.09, 3.08, 3.08, 3.08, 3.08, 3.08, 3.08, 3.07, 3.08, 3.07, 3.07, 3.07, 3.07, 3.07, 3.07, 3.07, 3.07, 3.06, 3.08, 3.06, 3.06, 3.06, 3.06, 3.06, 3.07, 3.05, 3.06, 3.05, 3.05, 3.05, 3.05, 3.05, 3.05, 3.05, 3.05, 3.05, 3.04, 3.04, 3.04, 3.04, 3.04, 3.04, 3.04, 3.06, 3.05, 3.04, 3.04, 3.05, 3.04, 3.04, 3.04, 3.04, 3.03, 3.04, 3.03, 3.03, 3.03, 3.03, 3.03, 3.03, 3.03, 3.03, 3.03, 3.03, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.01, 3.01, 3.01, 3.05, 3.04, 3.04, 3.04, 3.03, 3.03, 3.03, 3.03, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.02, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.99, 2.99, 2.99, 2.99, 2.99, 2.99, 2.99, 2.99, 2.98, 2.99, 2.98, 2.98, 2.98, 2.98, 2.98, 2.98, 2.98, 2.98, 2.98, 2.98, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.97, 2.96, 2.96, 2.97, 2.96, 2.96, 2.96, 2.96, 2.96, 2.96, 2.96, 2.96, 2.95, 2.95, 2.95, 2.96, 2.95, 2.95, 2.95, 2.95, 2.95, 2.95, 2.95, 2.95, 2.94, 2.94, 2.95, 2.95, 2.94, 2.95, 2.94, 2.96, 2.96, 2.96, 2.96, 2.96, 2.95, 2.95, 2.96, 2.95, 2.95, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.94, 2.93, 2.94, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.92, 2.92, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.9, 2.91, 2.91, 2.91, 2.91, 2.91, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.89, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.89, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88, 2.88];
% 사이클 수에 따른 용량 보간 함수 생성
capacity_func = @(cycle) interp1(cycle_num_data, dis_cap_data, cycle, 'pchip', 'extrap');
%--- CSV 파일에서 추출한 데이터 ---
capacity_25C_data = [0.0016666666666666, 0.0033333333333333, 0.005, 0.0066666666666666, 0.0083333333333333, 0.01, 0.0116666666666666];
voltage_25C_data = [2.763, 2.7635, 2.7635, 2.7635, 2.764, 2.764, 2.764];
capacity_minus20C_data = [0.0016666666666666, 0.0033333333333333, 0.005, 0.0066666666666666, 0.0083333333333333, 0.01, 0.0116666666666666];
voltage_minus20C_data = [3.009, 3.373, 3.5855, 3.596, 3.5995, 3.6015, 3.603];
capacity_55C_data = [0.0016666666666666, 0.0033333333333333, 0.005, 0.0066666666666666, 0.0083333333333333, 0.01, 0.0116666666666666];
voltage_55C_data = [2.798, 2.799, 2.799, 2.799, 2.799, 2.799, 2.84];
%--------------------------------------------------------------------------
%   2. 시뮬레이션 설정 및 실행
%--------------------------------------------------------------------------
sim_temps = [0 25 45];       % ⭐ 시뮬레이션 온도 배열
num_cycles = 400;    % ⭐ 시뮬레이션 사이클 수
% 시뮬레이션 파라미터
C1_base = 1.0e+05;   % 분극 커패시터 (F)
I_discharge = -1.0;  % 방전 전류 (A)
T_total_cycle = 3600; % 한 사이클의 총 시간 (s)
dt = 1;              % 시간 단계 (s)
t_cycle = 0:dt:T_total_cycle; % 단일 사이클 시간 벡터
soc_initial = 100;
% 결과 저장용 셀 배열
results = cell(1, length(sim_temps));
% 초기 용량 설정
Q_initial_25C_ref = dis_cap_data(1);
% 온도별 시뮬레이션 루프
for i = 1:length(sim_temps)
    sim_temp = sim_temps(i);
    
    % 결과 저장용 배열 초기화
    V_cell_full = zeros(num_cycles, length(t_cycle));
    soc_full = zeros(num_cycles, length(t_cycle));
    q_full = zeros(num_cycles, 1);
    
    % 초기 용량과 용량 감소 계수를 온도별로 설정
    if sim_temp == 0
        ocv_data = ocv_data_0C; r0_data = r0_data_0C; r1_data = r1_data_0C; c1_data = c1_data_0C; r2_data = r2_data_0C; c2_data = c2_data_0C;
        Q_initial = Q_initial_25C_ref * 0.98; % 저온에서 초기 용량 감소 가정
        degradation_rate_capacity = 1.2; % 25도보다 큰 용량 감소율
    elseif sim_temp == 25
        ocv_data = ocv_data_25C; r0_data = r0_data_25C; r1_data = r1_data_25C; c1_data = c1_data_25C; r2_data = r2_data_25C; c2_data = c2_data_25C;
        Q_initial = Q_initial_25C_ref;
        degradation_rate_capacity = 1.0; % 기준 용량 감소율
    else % sim_temp == 45
        ocv_data = ocv_data_45C; r0_data = r0_data_45C; r1_data = r1_data_45C; c1_data = c1_data_45C; r2_data = r2_data_45C; c2_data = c2_data_45C;
        Q_initial = Q_initial_25C_ref * 1.02; % 고온에서 초기 용량 증가 가정
        degradation_rate_capacity = 1.5; % 25도보다 크지만 0도보다 큰 감소율
    end
    
    % 시뮬레이션 루프
    for cycle = 1:num_cycles
        % 용량 감소 모델을 단순화
        degradation_amount_ref = Q_initial_25C_ref - capacity_func(cycle);
        Q_rated_current = Q_initial - degradation_amount_ref * degradation_rate_capacity;
        q_full(cycle) = Q_rated_current;
        
        % 각 사이클 시작 시 초기화
        soc_current = soc_initial;
        v_c1_current = 0; v_c2_current = 0;
        
        for k = 1:length(t_cycle)
            % 전류 설정 (정전류 방전)
            I_current = I_discharge;
            
            % 현재 SOC에 따른 파라미터 보간
            V_oc_k = ocv_func(soc_current, ocv_data);
            
            degradation_rate_temp = (1 + (sim_temp - 25)^2 * 0.0008);
            degradation_rate_cycle = (1 + (cycle / num_cycles) * 0.2);
            degradation_factor = degradation_rate_temp * degradation_rate_cycle;
            
            R0_k = r0_func(soc_current, r0_data) * degradation_factor;
            R1_k = r1_func(soc_current, r1_data) * degradation_factor;
            C1_k = c1_func(soc_current, c1_data) * degradation_factor;
            R2_k = r2_func(soc_current, r2_data) * degradation_factor;
            C2_k = c2_func(soc_current, c2_data) * degradation_factor;
            
            % 커패시터 전압 업데이트 (Euler 방법)
            dV_c1_dt = (abs(I_current) - v_c1_current / R1_k) / C1_k;
            v_c1_current = v_c1_current + dt * dV_c1_dt;
            
            dV_c2_dt = (abs(I_current) - v_c2_current / R2_k) / C2_k;
            v_c2_current = v_c2_current + dt * dV_c2_dt;
            
            % 셀 전압 계산 (V_C2 추가)
            V_cell_full(cycle, k) = V_oc_k - abs(I_current) * R0_k - v_c1_current - v_c2_current;
            
            % SOC 업데이트
            soc_current = soc_current + (I_current * dt / (Q_rated_current * 3600)) * 100;
            if soc_current < 0
                soc_current = 0;
            end
            soc_full(cycle, k) = soc_current;
        end
        
        results{i} = struct('V_cell_full', V_cell_full, 'soc_full', soc_full, 'q_full', q_full);
    end
end

%--------------------------------------------------------------------------
%   3. 결과 시각화
%--------------------------------------------------------------------------
% ⭐ 추가된 부분: 시뮬레이션 1사이클과 실제 데이터 비교
figure(1);
plot(capacity_25C_data, voltage_25C_data, 'bo-', 'DisplayName', '25C 실제 데이터');
hold on;
plot(capacity_minus20C_data, voltage_minus20C_data, 'ro-', 'DisplayName', '0C 실제 데이터');
plot(capacity_55C_data, voltage_55C_data, 'go-', 'DisplayName', '45C 실제 데이터');
plot(t_cycle' * abs(I_discharge) / 3600, results{2}.V_cell_full(1, :), 'b--', 'LineWidth', 2, 'DisplayName', '25C 시뮬레이션');
plot(t_cycle' * abs(I_discharge) / 3600, results{1}.V_cell_full(1, :), 'r--', 'LineWidth', 2, 'DisplayName', '0C 시뮬레이션');
plot(t_cycle' * abs(I_discharge) / 3600, results{3}.V_cell_full(1, :), 'g--', 'LineWidth', 2, 'DisplayName', '45C 시뮬레이션');
hold off;
title('1사이클 방전 곡선 비교');
xlabel('용량 (Ah)');
ylabel('전압 (V)');
legend('show');
grid on;
% 사이클에 따른 방전 용량 감소 (열화)
figure(2);
plot(cycle_num_data, dis_cap_data, '-o', 'LineWidth', 2, 'DisplayName', '25C 실제 데이터');
hold on;
for i = 1:length(sim_temps)
    plot(1:num_cycles, results{i}.q_full, '--', 'LineWidth', 2, 'DisplayName', ['시뮬레이션 모델 ' num2str(sim_temps(i)) 'C']);
end
hold off;
title('사이클에 따른 방전 용량 감소 (열화)');
xlabel('사이클 수');
ylabel('방전 용량 (Ah)');
legend('show');
grid on;

% 배터리 전압 변화
figure(3);
for i = 1:length(sim_temps)
    plot(t_cycle, results{i}.V_cell_full(1,:), 'LineWidth', 1, 'DisplayName', [num2str(sim_temps(i)) 'C - 1st Cycle']);
    hold on;
    plot(t_cycle, results{i}.V_cell_full(100,:), 'LineWidth', 1, 'DisplayName', [num2str(sim_temps(i)) 'C - 100th Cycle']);
    plot(t_cycle, results{i}.V_cell_full(400,:), 'LineWidth', 1, 'DisplayName', [num2str(sim_temps(i)) 'C - 400th Cycle']);
end
hold off;
title(['배터리 전압 변화 (선택된 사이클)']);
xlabel('시간 (s)');
ylabel('전압 (V)');
legend('show');
grid on;

% 옴 저항 변화 (열화)
figure(4);
for i = 1:length(sim_temps)
    r0_at_50soc = interp1(soc_data, eval(['r0_data_' num2str(sim_temps(i)) 'C']), 50);
    degradation_rate_temp_r0 = (1 + (sim_temps(i) - 25)^2 * 0.0008);
    degradation_rate_cycle_R = (1 + (1:num_cycles)' / num_cycles * 0.2);
    r0_sim_avg = r0_at_50soc * degradation_rate_temp_r0 * degradation_rate_cycle_R;
    
    plot(1:num_cycles, r0_sim_avg, '-o', 'LineWidth', 2, 'DisplayName', [num2str(sim_temps(i)) 'C']);
    hold on;
end
hold off;
title('옴 저항 변화 (열화)');
xlabel('사이클 수');
ylabel('R0 (Ohm)');
legend('show');
grid on;
%--------------------------------------------------------------------------
%   4. 시뮬레이션 결과 엑셀 파일로 저장
%--------------------------------------------------------------------------
fprintf('엑셀 파일 저장 중...\n');
% ⭐ R0, R1, R2, C1, C2, Tau1, Tau2 데이터 저장 (SOC별, 온도별 시트)
parameters_to_save = {'r0', 'r1', 'r2', 'c1', 'c2', 'tau1', 'tau2'};
for p = 1:length(parameters_to_save)
    param_name = parameters_to_save{p};
    fprintf(['\n' param_name ' 데이터 저장 중...\n']);
    
    soc_targets = [88.88 77.77 66.66 55.55 44.44 33.33 22.22 11.11 0];
    header = cell(1, length(soc_targets) + 1);
    header{1} = 'Cycle';
    for s = 1:length(soc_targets)
        header{s+1} = [param_name '_' num2str(soc_targets(s)) 'pct'];
    end
    
    for i = 1:length(sim_temps)
        sim_temp = sim_temps(i);
        temp_str = num2str(sim_temp);
        sheet_name = [param_name '_vs_SOC_' temp_str 'C'];
        
        param_data = zeros(num_cycles, length(soc_targets));
        
        if sim_temp == 0
            param_func_data = eval([param_name '_data_0C;']);
        elseif sim_temp == 25
            param_func_data = eval([param_name '_data_25C;']);
        else
            param_func_data = eval([param_name '_data_45C;']);
        end
        
        for cycle = 1:num_cycles
            degradation_rate_temp = (1 + (sim_temp - 25)^2 * 0.0008);
            degradation_rate_cycle = (1 + (cycle / num_cycles) * 0.2);
            degradation_factor = degradation_rate_temp * degradation_rate_cycle;

            param_func = @(soc, data) interp1(soc_data, data, soc, 'pchip', 'extrap');
            param_interpolated = param_func(soc_targets, param_func_data) * degradation_factor;
            
            param_data(cycle, :) = param_interpolated;
        end
        
        xlData = [header; num2cell([(1:num_cycles)' param_data])];
        xlswrite([param_name '_by_SOC_results.xlsx'], xlData, sheet_name);
    end
end


fprintf('\n모든 파라미터 데이터가 각각의 엑셀 파일로 저장되었습니다.\n');
